package full_guide.part_01.chapter_04._12_ByteUShift;

/**
 * Created by mega on 23.08.2016.
 */
// Беззнаковый сдвиг двоичных разрядов значения типа byte
public class ByteUShift {
    public static void main(String[] args) {
        char hex[] = {
                '0', '1', '2', '3', '4', '5', '6', '7',
                '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
        };

       /*
       shift >> заполняет слева 0 для положительных и 1 для отрицательных
       1111 0001   = f1 (при приведении к байту нули слева отсекаются и получаем отрицательное число)
       1111 1111 1111 1111 1111 1111 1111 0001    (продвижение к int, тк число отрицательное слева заполнение 1)
       1111 1111 1111 1111 1111 1111 1111 1111    (после >> 4)
       1111 1111    = -1      (после приведения к bite)
       */
        byte b = (byte) 0xf1; // -15
        byte c = (byte) (b >> 4);

        /*
       1111 1111 1111 1111 1111 1111 1111 0001    (продвижение к int, тк число отрицательное слева заполнение 1)
       0000 1111 1111 1111 1111 1111 1111 1111    (после >>> 4) (при >>> слева только 0000000)
       1111 1111    = -1    (рпивели int к byte)
       */
        byte d = (byte) (b >>> 4);


        // b продвигается к int, затем у него берется маска 0xff и результат >> 4
        /*
       1111 0001   = f1 (при приведении к байту нули справа отсекаются и получаем отрицательное число)
       1111 1111 1111 1111 1111 1111 1111 0001    (продвижение к int, тк число отрицательное слева заполнение 1)
       0000 0000 0000 0000 0000 0000 1111 1111    ( ff -> int bits ) применим это к верхнему со знаком & -> маскирование
       ---------------------------------------  &
       0000 0000 0000 0000 0000 0000 1111 0001    ( результат маскирования )
       0000 0000 0000 0000 0000 0000 0000 1111   ( после >> 4 )
       0000 1111   ( = 15 после приведения к byte)

        */
        byte e = (byte) ((b & 0xff) >> 4);


        System.out.println(b + " (byte) >> 4 = " + c);
        System.out.println(b + " (byte) >>> 4 = " + d);
        System.out.println(b + " & 0xff >> 4 = " + e);

    }
}
