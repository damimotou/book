Builder

Свойства шаблона
Тип: производящий шаблон
Уровень: компонент

Назначение
Упрощает создание сложных объектов путем определения класса, предназначен-
ного для построения экземпляров другого класса. Шаблон Builder генерирует только
одну сущность. Хотя эта сущность, в свою очередь, может содержать более одного
класса, но один из полученных классов всегда является главным.

Область применения
Шаблон Builder рекомендуется использовать в следующих случаях.
• Класс имеет сложную внутреннюю структуру (особенно это касается тех клас-
сов, которые работают с переменными наборами связанных с ними объектов).
• Атрибуты класса зависят один от другого. Одно из типичных применений шаб-
лона Builder — это его применение в тех случаях, когда имеет место поэтапное
создание сложного объекта. Если атрибуты продукта зависят один от другого,
его невозможно получить другим способом. Например, предположим, что мы
создаем такой объект, как заказ. В этом случае, прежде чем переходить к
"созданию" метода доставки, необходимо убедиться в том, что установлено
значение, определяющее штат США, так как оно влияет на значение налога с
продаж, которое применяется ко всему заказу.
• Класс использует другие объекты системы, получить которые во время созда-
ния затруднительно или неудобно.

Описание
Так как данный шаблон предназначен для построения сложных объектов, причем
необязательно из одного источника, он называется Builder. Усложнение способов
создания объекта ведет к возрастанию сложности управления созданием объекта с
помощью конструкторов. Это особенно относится к тем объектам, которые не могут
полагаться лишь на ресурсы, которые находятся под их контролем.
К такой категории часто можно отнести объекты бизнес-модели. Как правило, та-
ким объектам требуются для инициализации данные, находящиеся в базе данных, а
также для работы им может понадобиться взаимодействовать с другими объектами,
образуя, таким образом, бизнес-модель. В качестве другого примера можно привести
комплексные объекты некой системы, такие как объекты, представляющие собой
элементы рисунка, которые обрабатываются программой визуального редактирова-
ния. Такие объекты могут требовать установления связей с произвольным количест-
вом других объектов, причем сразу же в момент создания.
В подобных случаях имеет смысл определить отдельный класс (Builder), на кото-
рый возлагается ответственность за создание прикладных объектов. Этот класс коор-
динирует сборку объектов-продуктов: создание ресурсов, сохранение промежуточных
результатов и обеспечение функциональной структуры создаваемого объекта. Кроме
того, Builder может получать системные ресурсы, необходимые для создания объекта-
продукта.

Реализация
При реализации шаблона Builder обычно используются следующие классы.
• Director. Содержит ссылку на экземпляр класса AbstractBuilder. По этой
ссылке класс D i r e c t o r вызывает методы создания конкретного генератора
классов, которые создают различные части продукта, что в конечном итоге
приводит к созданию нового объекта-продукта.
• AbstractBuilder. Интерфейс, который определяет методы, предназначен-
ные для создания отдельных частей продукта.
• ConcreteBuilder. Класс, реализующий интерфейс AbstractBuilder. Класс
ConcreteBuilder содержит реализацию всех методов, необходимых для соз-
дания объекта Product. При реализации методов должна обеспечиваться ра-
бота алгоритмов, на которые возлагается задача обработки полученной от
класса D i r e c t o r информации и создание соответствующих частей объекта
Product. Кроме того, у класса ConcreteBuilder обязательно должен быть
метод g e t P r o d u c t либо метод создания нового объекта, который возвращал
бы ссылку на новый экземпляр класса P r o d u c t .
• P r o d u c t . Полученный объект. Продукт можно определять и как интерфейс
(что предпочтительнее), и как класс.

Достоинства и недостатки
Шаблон Builder облегчает управление процессом создания сложных объектов. Это
свойство шаблона проявляется в одной из двух форм.
• Для объектов, которые требуют поэтапного создания (т.е. соблюдения опреде-
ленной последовательности операций, в результате которых объект становит-
ся полноценным), шаблон Builder играет роль объекта более высокого уровня,
который управляет всем ходом процесса. Он может координировать создание
всех ресурсов и проверять их корректность, а также при необходимости обес-
печивать стратегию восстановления в случае возникновения ошибок.
• Для объектов, которым во время создания необходим доступ к уже существую-
щим ресурсам системы, например, когда необходимо подключение к базе дан-
ных или доступ к существующим объектам бизнес-модели, шаблон Builder игра-
ет роль центрального пульта управления такими ресурсами. Кроме того, в по-
добных случаях шаблон Builder также является средством централизованного
управления созданием генерируемых подобными объектами продуктов, пред-
назначенных для получения к ним доступа со стороны других объектов систе-
мы. Как и в случае с другими производящими шаблонами, это упрощает работу
клиентов программной системы, так как им нужно для генерации нового ресур-
са получить доступ лишь к одному объекту Builder.
Основной недостаток этого шаблона состоит в наличии жесткой связи между са-
мим генератором Builder, его продуктом и другими производными объектами, наде-
ленными полномочиями генератора, используемыми при создании объектов. Это
приводит к тому, что изменения, вносимые в продукт, генерируемый с помощью шаб-
лона Builder, часто требуют внесения изменений как в сам генератор Builder, так и в
наделенные его полномочиями объекты.
Варианты
Теоретически нет никаких препятствий для того, чтобы реализовать минималь-
ный шаблон Builder на основе лишь одного класса B u i l d e r с методом создания объ-
екта и его продукта. Однако на практике разработчики, стремясь обеспечить повы-
шенный уровень гибкости шаблона, расширяют базовый шаблон с помощью одного
или нескольких из следующих приемов.
• Создание абстрактного генератора B u i l d e r . Определив абстрактный класс
или интерфейс, в котором метод создания объекта просто объявляется, мы по-
лучаем более универсальную систему, на основе которой можно реализовывать
различные виды генераторов.
• Определение у генератора Builder нескольких методов создания объекта.
В некоторых случаях можно прибегнуть к определению нескольких методов
(это достигается путем использования перегрузки методов генератора, предна-
значенных для создания объектов), что позволяет получить несколько разных
способов инициализации конструируемого ресурса.
• Разработка объектов, наделенных полномочиями генератора. В данном вари-
анте объект Director содержит общий метод создания объектов Product, вы-
зов которого сводится к серии вызовов более специализированных методов
создания конкретного генератора Builder. Таким образом, при использова-
нии данного подхода объект Director играет роль диспетчера, управляя про-
цессом создания объектов генератором Builder.
Родственные шаблоны
К родственным можно отнести шаблон Composite (стр. 171). На практике шаблон
Builder часто используется для генерации именно объектов Composite, так как по-
следние имеют очень сложную структуру.