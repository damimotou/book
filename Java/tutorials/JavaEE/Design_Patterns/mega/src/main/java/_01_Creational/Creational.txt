Производящие шаблоны (creational patterns) предназначены для обеспечения выполне-
ния одной из самых распространенных задач в ООП — создания объектов в системе.
В ходе работы большинства объектно-ориентированных систем, независимо от уров-
ня их сложности, создается множество экземпляров объектов. Производящие шабло-
ны облегчают процесс создания объектов, предоставляя разработчику следующие
возможности.
• Единый способ получения экземпляров объектов. В системе обеспечивается механизм
создания объектов без необходимости идентификации определенных типов
классов в программном коде.
• Простота. Некоторые из шаблонов упрощают процесс создания объектов до
такой степени, что полностью избавляют разработчика от необходимости на-
писания большого и сложного программного кода для получения экземпляра
объекта.
• Учет ограничений при создании. Некоторые шаблоны позволяют при создании
объектов налагать ограничения на их тип или количество в соответствии с ус-
тановленными требованиями системы.
В данной главе будут обсуждаться следующие производящие шаблоны проектиро-
вания.
• Abstract Factory. Обеспечивает создание семейств взаимосвязанных или завися-
щих друг от друга объектов без указания их конкретных классов.
• Builder. Упрощает создание сложных объектов путем определения класса, предназ-
наченного для построения экземпляров другого класса. Шаблон Builder генерирует
только одну сущность. Хотя эта сущность в свою очередь может содержать более
одного класса, но один из полученных классов всегда является главным.
• Factory Method. Определяет стандартный метод создания объекта, не связанный
с вызовом конструктора, оставляя решение о том, какой именно объект созда-
вать, за подклассами.
• Prototype. Облегчает динамическое создание путем определения классов, объек-
ты которых могут создавать собственные дубликаты.
• Singleton. Обеспечивает наличие в системе только одного экземпляра заданного
класса, позволяя другим классам получать доступ к этому экземпляру.
Два из перечисленных выше шаблона, а именно Abstract Factory и Factory Method,
базируются исключительно на концепции определения создания настраиваемых объ-
ектов. Подразумевается, что разработчик, применяющий эти шаблоны, при редакти-
рализации системы обеспечит механизм расширения создаваемых классов или ин-
терфейсов. В силу этой особенности данные шаблоны часто объединяются с другими
производящими шаблонами.
