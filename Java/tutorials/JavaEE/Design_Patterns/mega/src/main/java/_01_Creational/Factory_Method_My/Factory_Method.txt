F a c t o r y
M e t h o d
Также известен как Virtual Constructor

Свойства шаблона
Тип: производящий шаблон
Уровень: класс

Назначение
Определяет стандартный метод создания объекта, не связанный с вызовом конст-
руктора, оставляя решение о том, какой именно объект создавать, за подклассами.

Область применения
Шаблон Factory Method рекомендуется использовать в следующих случаях.
• Необходимо создать систему, обладающую свойством расширяемости. Это оз-
начает, что разработчику придется сделать выбор в пользу гибкости, оставляя
некоторые решения, например, какой именно объект создавать, "на потом".
• По некоторым соображениям предпочтительнее, чтобы решение о том, какой
объект создавать, принималось на уровне подкласса, а не суперкласса.
• В силу тех или иных обстоятельств, известно, когда нужно создать объект, но
неизвестно, какой именно.
• Необходимо иметь в распоряжении несколько перекрытых конструкторов с оди-
наковыми списками параметров, что недопустимо в языке Java. В этом случае
можно прибегнуть к шаблону Factory Method, используя разные имена классов.

Описание
Название шаблона Factory Method объясняется тем, что он "фабрикует" объекты,
когда в них возникает необходимость.
Приступая к разработке приложения, далеко не всегда можно заранее решить, какие
именно компоненты вам понадобятся. Обычно у разработчика есть лишь общее видение
того, что должны делать компоненты, но реализация функциональности компонентов с
уточнением их возможностей выполняется позже, в ходе работы над проектом.
Конечно, частично данную проблему решает использование интерфейсов, описы-
вающих подобные компоненты. Однако применение интерфейсов в свою очередь за-
трудняет работу программиста, так как из интерфейса невозможно создать объект.
Для того чтобы получить объект, нужно реализовать класс. Поэтому, вместо того,
чтобы разрабатывать реализацию некоего класса, специфичного для конкретного
приложения, можно просто вычленить из класса функциональность конструктора и
реализовать ее в виде специального метода, "фабрикующего" объекты приложения.
Таким образом можно получить некий класс, например ConcreteCreator, отве-
чающий за создание определенных объектов. Этот класс предназначается для создания
экземпляров реализации (ConcreteProduct) определенного интерфейса (Product).

Для реализации шаблона Factory Method необходимы следующие классы.
•
Product. Интерфейс "фабрикуемых" объектов.
• ConcreteProduct. Реализация класса Product. Создание объектов этого клас-
са возлагается на класс ConcreteCreator.
• Creator. Интерфейс, который определяет собственно метод, "фабрикующий"
объекты (factoryMethod).
• ConcreteCreator. Класс, расширяющий интерфейс Creator и содержащий
реализацию метода f actoryMethod. Этот метод может возвращать любой объ-
ект, который реализует интерфейс Product.

Достоинства и недостатки
Основным достоинством такого решения является обеспечиваемая им универ-
сальность PIM-приложения. В самом деле, приложению достаточно знать лишь то,
как вызывается редактор любого элемента, а сведения о том, как нужно редактиро-
вать данные этого элемента, содержатся в самом редакторе. Кроме того, на редактор
можно возложить и задачу создания графического пользовательского интерфейса, с
помощью которого обеспечивается собственно редактирование. Все это позволяет
сделать PIM-приложение модульным, упростить добавление к нему информации о но-
вых типах данных и избавиться при этом от необходимости внесения изменений в
исходный текст приложения при каждом таком добавлении.
Шаблон Factory Method широко используется во многих интерфейсах системы
JDBC (Java Database Connectivity — связь с базами данных из Java). Это позволяет заме-
нять любой JDBC-драйвер любым другим JDBC-драйвером (лишь бы он был корректно
написан), не внося изменений в само приложение. (Более подробные сведения о
применении шаблонов в системе JDBC приведены в разделе JDBC на стр. 316.)

Варианты
Данный шаблон может выполняться в следующих вариантах.
•
Creator может содержать стандартную реализацию метода factoryMethod.
В этом случае Creator уже не должен быть абстрактным классом или интер-
фейсом, а может выполняться в виде обычного класса. Достоинством этого ва-
рианта является то, что разработчик избавляется от необходимости создавать
подкласс класса Creator.
• Product может выполняться в виде абстрактного класса, что позволяет раз-
местить в нем реализацию других методов.
• Методу, "фабрикующему" объекты, можно передавать параметр. Это позволяет ге-
нерировать продукты разных типов в зависимости от полученного параметра, что
приводит к снижению количества необходимых методов вида f actoryMethod.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Abstract Factory (стр. 26). Может использовать один или несколько методов ти-
па factoryMethod.
• Prototype (стр. 48). Позволяет избавиться от необходимости создания подклас-
са класса Creator.
• Template Method (стр. 146). Шаблонные методы обычно вызывают методы,
"фабрикующие" объекты.
• Data Access Object [CJ2EEP]. Шаблон Data Access Object использует шаблон
Factory Method, чтобы обеспечить возможность создания конкретных экземпля-
ров Data Access Object без привязки к особенностям нижележащей базы данных.
