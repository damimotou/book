Proxy
Также известен как Surrogate

Свойства шаблона
Тип: структурный
Уровень: компонент

Назначение
Представление другого объекта, обусловленное необходимостью доступа или по-
вышения скорости, либо соображениями безопасности.

Представление
По мере продвижения пользователя по службе его PIM-приложению приходится
справляться с хранением информации о все большем количестве запланированных
встреч и важных дат. Адресная книга пользователя полна адресов знакомых и коллег,
включая информацию об их семьях, увлечениях и другие данные, которые в той или
иной ситуации могут оказаться важными. Количество хранимых контактов, которое
поначалу исчислялось десятками, давно уже перевалило за тысячу.
Однако при этом пользователю нередко приходится открывать Р1М-приложение
лишь для того, чтобы слегка скорректировать время проведения собрания, сделать
заметку о необходимости покупки какой-нибудь мелочи или выполнить какую-нибудь
другую сравнительно простую задачу. Понятно, что загрузка всей адресной книги при
каждом запуске приложения в таких ситуациях — ненужная и даже раздражающая
операция. Пользователю приходится ждать, пока проинициализируются все записи
открываемой всякий раз книги, причем никакой пользы из функциональности, поро-
ждающей эту задержку, он не извлекает.
С точки зрения пользователя, такую ситуацию нельзя назвать нормальной: все, что
ему нужно, — лишь адресная книга, появляющаяся там, где она необходима, и тогда, ко-
гда в ней возникает необходимость. (В идеальном случае адресная книга должна появ-
ляться за миг до того, как пользователь о ней подумает, не раньше и не позже.) Кроме
того, необходимость использования в какой-то момент адресной книги вовсе не подра-
зумевает, что пользователю нужна исчерпывающая информация. Например, пользова-
телю могут понадобиться лишь итоговые сведения о количестве хранящихся в книге за-
писей или ему может потребоваться просто добавить в адресную книгу новую запись, не
просматривая и не редактируя всей книги. Иными словами, в большинстве случаев
пользователю нужна лишь какая-то малая часть информации адресной книги.
Решением данной проблемы является введение промежуточного объекта, кото-
рый обеспечивает интерфейс с адресной книгой или ее частью. С точки зрения поль-
зователя, этот промежуточный объект выглядит точно так же, как и адресная книга,
но его загрузка и отображение выполняется значительно быстрее. С другой стороны,
когда пользователю нужна сама адресная книга для выполнения такой операции, как,
например, обновление адреса коллеги, промежуточный объект создает для пользова-
теля объект полноценной адресной книги, обеспечивающий выполнение поставлен-
ной задачи. Такой промежуточный объект часто называют прокси-объектом в соот-
ветствии с названием шаблона Proxy.

Область применения
Шаблон Proxy рекомендуется использовать в тех случаях, когда нужно разработать
способ взаимодействия с объектом, работающий по более сложному сценарию, чем
при использовании обычной ссылки.
• Удаленный прокси-объекпг (remote proxy). Необходим локальный представитель объ-
екта, который находится в другом адресном пространстве (т.е. выполняется в
другой JVM).
• Виртуальный прокси-объект (virtualproxy). Требуется объект, который играет роль
промежуточного объекта, позволяющего отложить выполнение операции по
созданию полноценного объекта (именно этот вариант был описан в предыду-
щим разделе).
• Защитный прокси-объект (protection proxy). Нужно создать специальный объект,
который определял бы права доступа к реальному объекту.

Описание
Прокси-объект, или слепок (stub), — это представитель другого объекта. Для того
чтобы прокси-объект мог представлять некий реальный объект, прокси-объект дол-
жен реализовывать точно такой же интерфейс, что и последний. Более того, прокси-
объекту требуется хранить ссылку на реальный объект. Необходимость сохранения
такой ссылки объясняется тем, что прокси-объект должен уметь в случае необходимо-
сти вызывать методы реального объекта. Клиенты взаимодействуют с прокси-объек-
том, но сам прокси-объект может делегировать выполнение операций реальному объ-
екту. Несмотря на то, что прокси-объект реализует тот же интерфейс, что и реальный
объект, он, в отличие от последнего, может решать дополнительные задачи, такие
как осуществление удаленных коммуникаций или обеспечение безопасности.
Предположим, прокси-объект — это нечто вроде дублера реального объекта. Реа-
лизацию шаблона Proxy можно сравнить с процессом киносъемки опасных трюков.
Прокси-объект — это каскадер, а реальный объект — кинозвезда. Во время съемки
опасного эпизода из самолета без парашюта прыгает не реальный, а прокси-объект.
Поскольку последний реализует точно такой же интерфейс, что и реальный объект,
зрители не замечают никаких различий и полагают, что из самолета выпрыгнул ре-
альный объект. Но когда камера берет крупный план (т.е. по сюжету фильма реаль-
ный объект должен проявить актерское мастерство), прокси-объект вызывает для
выполнения этой работы реальный объект.
Прокси-объекты могут быть самыми разными в зависимости от того, каким прави-
лам они подчиняются.
• Remote proxy. Удаленный прокси-объект отвечает за обмен информацией по сети.
Он занимается маршелизацией (упаковкой) и демаршелизацией (распаковкой)
всех отправляемых и получаемых параметров.
• Virtual proxy. Создание реального объекта сопряжено со значительными наклад-
ными расходами, поэтому лучше оттягивать эту операцию на как можно более
поздний момент или же выполнять ее не сразу, а поэтапно. Чем больше ин-
формации известно виртуальному прокси-объекту, тем ниже вероятность того,
что понадобится создавать экземпляр реального объекта с целью обеспечения
доступа к тем или иным переменным.
• Protection proxy. Защитный прокси-объект может использоваться для управления
методами доступа, а также для предоставления индивидуальных разрешений
для вызова того или иного метода.

Реализация
Диаграмма классов шаблона Proxy представлена на рис. 3.10.
При реализации шаблона Proxy обычно используются следующие классы.
• Service. Интерфейс, который реализуют и реальный, и прокси-объект.
• ServiceProxy. Класс, который реализует интерфейс Service и в случае необходи-
мости перенаправляет все вызовы методов реальному объекту класса Servicelmpl.
• Servicelmpl. Реальная полноценная реализация интерфейса. Этот объект
представляется прокси-объектом класса ServiceProxy.

Достоинства и недостатки
Последствия, которые проявятся в приложении после реализации шаблона Proxy,
в значительной степени определяются типом прокси-объекта.
• Remote proxy. Достоинство удаленного прокси-объекта состоит в том, что он по-
зволяет скрыть факт работы в сети от клиента. Клиент, работая с таким объек-
том, будет считать, что объект локальный. В действительности он имеет дело с
локальным объектом, который для выполнения указанных ему операций от-
правляет вызовы по сети. Необходимо напомнить, что потенциальным недос-
татком прокси-объектрв такого типа является возможное резкое увеличение
времени отклика, что для клиента, не подозревающего о том, что он работает в
сети, может оказаться довольно неожиданным.
• Virtual proxy. Значительным преимуществом прокси-объектов данного типа яв-
ляется то, что они позволяют работать с собой как с реальными объектами, от-
кладывая создание последних до того момента, когда это действительно пона-
добится. Более того, такие прокси-объекты могут даже в какой-то мере зани-
маться оптимизацией, например, определять, когда и как должен создаваться
реальный объект.
• Protection proxy. Достоинство таких прокси-объектов состоит в том, что они по-
зволяют определять методы управления доступом.

Варианты
Один из вариантов реализации шаблона Proxy состоит в создании такого прокси-
объекта, который ничего не знает о реальном объекте, кроме его интерфейса. Это
позволяет повысить гибкость системы, но на практике такой вариант можно приме-
нять только в тех случаях, когда прокси-объект не отвечает за создание и (или) унич-
тожение реального объекта.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Adapter (стр. 156). Подобно шаблону Proxy, этот шаблон обеспечивает интерфейс
для определенного объекта. Различие состоит в том, что шаблон Proxy предос-
тавляет точно такой же интерфейс, тогда как шаблон Adapter — несколько иной.
• НОРР (стр. 202). Этот шаблон может применять шаблон Proxy для организации
взаимодействия между двумя половинами разделенного объекта.
• Business Delegate [CJ2EEP]. Данный шаблон может использоваться для тех же
целей, что и шаблон Proxy: объект, выполненный в соответствии с шаблоном
Business Delegate, может быть локальным представителем объекта, находяще-
гося на бизнес-уровне.