Decorator
Также известен как Wrapper

Свойства шаблона
Тип: структурный
Уровень: компонент

Назначение
Предоставление механизма для добавления или удаления функциональности ком-
понентов без изменения их внешнего представления или функций.

Представление
С помощью рассмотренного в предыдущем разделе шаблона Composite в PIM-
приложение можно добавить функциональность, обеспечивающую управление про-
ектами. В соответствии с шаблоном Composite, проект представляется в виде иерар-
хии объектов класса Task и Deliverable, а корневым является объект класса
Project. Все классы реализуют интерфейс Projectltem, что идентифицирует их
как классы, принадлежащие некоторому проекту.
Но как быть в том случае, если нужно расширить базовые средства классов Task и
Deliverable, добавив в них, например, следующую функциональность?
• Зависимые элементы. Элементы проекта, завершение которых зависит от экзем-
пляра класса Task или Deliverable.
• Вспомогательные документы. Объекты класса Task или Deliverable, которые
могут ссылаться на дополнительные документы.
Если для добавления данной функциональности воспользоваться механизмом на-
следования, т.е. создать новые подклассы, это потребует немалого труда по разработ-
ке дополнительного программного кода. Например, для того чтобы одни только по-
томки класса D e l i v e r a b l e получили средства поддержки указанных функций, нужно
разработать четыре класса: D e l i v e r a b l e , DependentDeliverable, Supported-
D e l i v e r a b l e , SupportedDependentDeliverable.
Столкнувшись с этим недостатком, программист, возможно, решит для добавле-
ния новой функциональности прибегнуть к композиции. Однако добавление в оба
класса Task и D e l i v e r a b l e средств поддержки нужных функций приводит к дублиро-
ванию одного и того же кода в приложении. Как минимум, это скажется на увеличе-
нии объема кода и степени его сложности.
Что если вместо этого сгенерировать классы, обладающие возможностью "подключе-
ния на ходу" (plugin). Тогда не придется вносить изменения, призванные обеспечить под-
держку новых функций, непосредственно в классы Task и Deliverable — достаточно
лишь создать зависимые классы, которые можно было бы подключить с целью расшире-
ния функциональности к любому элементу проекта. Можно сравнить это с программным
эквивалентом операции, которую мы выполняем, подключая комплект устройств для соз-
дания эффекта объемного звука к стандартному стереовыходу. Действительно, возможно-
сти оборудования на самом деле не изменились, просто в нашем распоряжении появились
некоторые новые средства. Возвращаясь к программированию, предположим, что опре-
делены классы DependentProjectltem и SupportedProjectltem. В каждом из этих
классов содержится программный код, обеспечивающий поддержку лишь узкого круга за-
дач, связанных с назначением класса, а также ссылка на реальный элемент проекта, кото-
рый экземпляр данного класса расширяет. Таким образом, резко уменьшается объем про-
граммного кода, а разработчик при этом получает гораздо большую свободу в выборе лю-
бых комбинаций таких "декоративных" классов (т.е. классов, выполненных в соответст-
вии с шаблоном Decorator) для добавления целых групп определенных свойств к стан-
дартным свойствам элементов проекта.

Область применения
Шаблон Decorator рекомендуется использовать в следующих случаях.
• Необходимо осуществлять динамическое изменение свойств классов, причем
незаметно для пользователя и не связываясь с ограничениями, присущими ме-
ханизму наследования.
• Свойства могут подключаться к компоненту или отключаться от него во время
работы системы.
• Имеется несколько независимых функций, которые нужно применять динами-
чески и в любой комбинации.

Описание
Некоторые объекты реального мира имеют сложную функциональность и (или)
структуру, расширение или уменьшение которых в точности соответствует компо-
нентной модели. Примером такого объекта может быть карта с прилагаемыми к ней
прозрачными пленками, на которых нанесены города или возвышенности — объект
остается одним и тем же, но его свойства гибко изменяются в зависимости от текущих
требований.
Шаблон Decorator работает по такому же принципу — он обеспечивает добавление до-
полнительных слоев к базовому объекту, а также в случае необходимости замену одних
слоев другими. Каждый слой дополняет базовый объект своим поведением (методами) и
состоянием (переменными). Шаблон позволяет объединять и как угодно ассоциировать
слои друг с другом и базовым объектом, что дает возможность получить сложные модели
поведения объекта из набора относительно простых строительных блоков.
Естественно, шаблон Decorator как нельзя лучше подходит для использования в
приложениях, реализующих функциональность динамически создаваемых много-
слойных видов и представлений. Одним из примеров таких приложений является се-
мейство продуктов для обеспечения групповой работы (groupware), позволяющих
участникам рабочей группы по сети редактировать один и тот же базовый документ.
Кроме того, этот шаблон может с успехом применяться в графических редакторах, а
также в большинстве приложений, связанных с форматированием фрагментов тек-
ста, отдельных абзацев или целых документов. На низком уровне шаблон Decorator
можно успешно применять для получения заданной функциональности путем приме-
нения к базовой модели определенной комбинации фильтров. Среди примеров мож-
но выделить потоковый ввод/вывод, а также коммуникационные подключения
(сокеты), подобные объекту Buf f e r R e a d e r , который позволяет считывать строку за
строкой из объекта Reader.
Применение шаблона Decorator можно сравнить с тем, как в автосалоне предлага-
ются различные варианты оборудования автомобиля. Покупатель выбирает базовую
модель, а затем решает, каков будет цвет кузова, материал и цвет обивки салона, какое
будет установлено оборудование и т.п. При "добавлении" к автомобилю каждого но-
вого "слоя" он приобретает новые характеристики, что, естественно, отражается на
цене. (Конечно, отличие от шаблона Decorator имеется, и весьма существенное: по-
купатель не может с такой же легкостью, как он это делал во время заказа, изменить
свой выбор после того, как приобретет автомобиль.)

Реализация
Диаграмма классов шаблона Decorator представлена на рис. 3.6.
При реализации шаблона Decorator обычно используются следующие классы.
• Component. Представляет компонент, реализующий общую модель поведения.
Может быть как абстрактным классом, так и интерфейсом.
• D e c o r a t o r . Абстрактный класс или интерфейс, который определяет стандарт-
ное поведение, общее для всех экземпляров C o n c r e t e D e c o r a t o r . Этот класс
обеспечивает поддержку хранения информации: в нем содержится ссылка на
Component, который может быть представлен как классом ConcreteComponent,
так и классом C o n c r e t e D e c o r a t o r . Если иерархия классов D e c o r a t o r создается
в виде подклассов тех классов, которые они расширяют, эта ссылка может ис-
пользоваться для каких-то других целей.
• Один или более классов ConcreteDecorator. Каждый подкласс класса Decorator
должен поддерживать возможность образования связных списков (ссылка на ком-
понент плюс средства для добавления и удаления этой ссылки). Помимо базовых
требований, каждый класс ConcreteDecorator может определять дополнитель-
ные методы и (или) переменные для расширения компонента.

Достоинства и недостатки
Шаблон Decorator предоставляет разработчику возможность без особых усилий
настраивать и корректировать поведение объекта во время выполнения программы.
Кроме того, он значительно упрощает программирование, так как в соответствии с
этим шаблоном разработчик, вместо программирования функциональности в самом
компоненте, создает серию классов, каждый из которых отвечает за определенную
часть функциональности. Это также позволяет сделать компонент более простым с
точки зрения его расширяемости в будущем, поскольку для таких изменений доста-
точно лишь написать несколько новых классов, не затрагивая уже имеющихся.
В зависимости от поведения некоторые слои, выполненные в соответствии с шаб-
лоном Decorator, могут совместно использоваться несколькими объектами (обычно
это слои, поведение которых никак не связано с их состоянием). Это позволяет эко-
номить память, выделяемую для системы.
В самом крайнем варианте реализация шаблона Decorator обычно проявляется в
создании большого количества слоев: иными словами, между пользователем и реаль-
ным объектом размещается множество маленьких объектов. Такое решение может
иметь много неприятных последствий, таких как затруднение отладки и тестирова-
ния или снижение производительности системы, вызванное некорректно выбранной
архитектурой реализации шаблона.
Равенство объектов в системе всегда должно обрабатываться корректно. Этот
принцип особенно важен в отношении шаблона Decorator, поскольку объекты "сидят
друг перед другом". Обычно если в приложении требуется выполнять сравнение объ-
ектов, необходимо таким образом написать операцию сравнения, чтобы в ней либо
идентифицировался нижележащий объект, либо оценивалась комбинация базового
объекта с порядком и "значимостью" каждого слоя.
Наконец, для корректного удаления слоев из системы могут потребоваться допол-
нительные усилия, поскольку они могут находится в каком угодно месте цепочки. Для
того чтобы упростить задачу в некоторых реализациях шаблона Decorator разработ-
чики определяют как ссылку на следующий, так и ссылку на предыдущий объекты, что
облегчает процедуру удаления.

Варианты
Шаблон Decorator может реализовываться в следующих вариантах.
• Как отмечалось в предыдущем подразделе "Достоинства и недостатки", в неко-
торых случаях желательно разрабатывать классы шаблона таким образом, что-
бы они хранили ссылки как на следующий, так и на предыдущий объекты, что
облегчает их удаление во время работы приложения.
• В некоторых реализациях шаблона Decorator абстрактный класс Decorator не
используется. Как правило это происходит в тех случаях, когда у компонента
может быть лишь один дополнительный вариант.
• Можно создать перекрывающиеся классы Decorator, которые будут переоп-
ределять некоторые части поведенческой модели компонента. Однако при ис-
пользовании таких классов нужно быть осторожным, поскольку компоненты в
данном варианте могут вести себя непредсказуемо (если, конечно, в программ-
ном коде нет жестко установленных правил, определяющих, когда и как может
перекрываться поведение компонента).

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Adapter (стр. 156). Шаблон Adapter предназначен для изменения интерфейса
без внесения изменений в функциональность, тогда как шаблон Decorator ос-
тавляет неизменным интерфейс, но меняет функциональность.
• Composite (стр. 171). Шаблон Decorator можно рассматривать как облегченную
версию шаблона Composite: вместо хранения коллекции компонентов, класс
Decorator хранит лишь одну ссылку на другой компонент. Другое отличие со-
стоит в том, что Decorator расширяет функциональность, а не передает вызо-
вы методов.
• Strategy (стр. 130). Шаблон Decorator используется для модификации или рас-
ширения внешней функциональности объекта, тогда как шаблон Strategy — для
модификации его внутреннего поведения.
• Intercepting Filter [CJ2EEP]. Этот шаблон использует шаблон Decorator для полу-
чения модифицированного системного запроса без изменения самого запроса.