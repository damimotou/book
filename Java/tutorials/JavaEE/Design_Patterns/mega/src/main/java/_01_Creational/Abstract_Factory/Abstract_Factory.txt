Abstract
Factory
Также известен как Kit, Toolkit

Свойства шаблона
Тип: производящий шаблон
Уровень: компонент

Назначение
Обеспечивает создание семейств взаимосвязанных или зависящих друг от друга
объектов без указания их конкретных классов.

Область применения
Шаблон Abstract Factory рекомендуется использовать в следующих случаях.
• Клиент не должен зависеть от способа получения продукта.
• Приложение должно быть настраиваемым на использование одного из не-
скольких семейств продукта.
• Объекты должны создаваться в виде определенного набора, чтобы обеспечи-
валась возможность их сравнения.
• Необходимо создать набор классов и открыть для доступа их параметры и
взаимосвязи, не открывая детали их реализации.

Описание
В некоторых случаях приложение должно работать с широкой гаммой ресурсов
или в разнородных операционных системах. Вот лишь некоторые, наиболее типич-
ные примеры:
• оконный интерфейс;
• файловая система;
• коммуникации с другими приложениями или системами.
При разработке таких приложений возникает необходимость в создании меха-
низма, обеспечивающего надлежащий уровень их гибкости, чтобы подобные прило-
жения могли работать с разными ресурсами. В то же время необходимо позаботиться
и о том, чтобы при добавлении нового ресурса не приходилось перерабатывать ис-
ходный код уже работающего приложения.
Пожалуй, самый эффективный способ решения данной проблемы состоит в опре-
делении универсального механизма создания ресурсов, представленного шаблоном
Abstract Factory. Этот механизм обладает одним или более методов создания объек-
тов, к которым можно обращаться для генерации базовых ресурсов или абстрактных
продуктов.
Примером может быть сама технология Java, реализованная на многих платфор-
мах, для каждой из которых имеется много различных файловых систем или оконных
интерфейсов. Решение, принятое разработчиками технологии Java, состоит в абст-
ракции концепции файлов и оконного интерфейса и сокрытии деталей конкретной
реализации. Это позволяет создавать приложения, использующие базовые возможно-
сти ресурсов так, как если бы они представляли реальную функциональность.
Во время выполнения приложение создает и использует конкретные экземпляры
механизмов ( C o n c r e t e F a c t o r y ) и порожденные ими конкретные продукты
( C o n c r e t e P r o d u c t s ) . Получаемые классы полностью соответствуют требованиям
(contract), определенным абстрактными механизмами вида A b s t r a c t F a c t o r y и
A b s t r a c t P r o d u c t s , что обеспечивает возможность прямого использования этих
конкретных классов без повторного кодирования или перекомпиляции.

Реализация
Диаграмма классов шаблона Abstract Factory представлена на рис. 1.1.
При реализации шаблона Abstract Factory обычно используются следующие классы.
• A b s t r a c t F a c t o r y . Абстрактный класс или интерфейс, который определяет
механизмы создания абстрактных продуктов.
• A b s t r a c t P r o d u c t . Абстрактный класс или интерфейс, который описывает ба-
зовые функции ресурса, который будет использоваться приложением.
• C o n c r e t e F a c t o r y . Класс, порожденный от класса абстрактного механизма и
реализующий методы получения одного или нескольких конкретных продуктов.
• C o n c r e t e P r o d u c t . Класс, порожденный от класса абстрактного продукта и
реализующий определенный ресурс или операционную среду.

Достоинства и недостатки
Шаблон Abstract Factory помогает повысить общую гибкость приложения. При
этом гибкость должна проявляться, как во время разработки приложения, так и во
время его работы. Действительно, проектируя приложение, далеко не всегда можно
предсказать его дальнейшую область применения. При использовании шаблона
Abstract Factory в этом и нет особой нужды: достаточно определить общий "каркас", а
затем сосредоточиться на реализации функциональности отдельных частей незави-
симо от остальных компонентов приложения. Такой подход обязательно проявиться
и во время работы приложения — с ним будет гораздо легче интегрировать новые
компоненты и ресурсы.
Еще одно преимущество данного шаблона состоит в том, что он упрощает тести-
рование приложения в целом. Например, можно реализовать классы T e s t C o n c r e t e -
F a c t o r y и T e s t C o n c r e t e P r o d u c t s , которые могут эмулировать поведение подклю-
чаемого к приложению нового ресурса.
Однако для того чтобы данные преимущества стали ощутимыми на практике, не-
обходимо тщательно продумать, как определить соответствующий базовый интер-
фейс абстрактного продукта. Если свойства абстрактного продукта определены не-
брежно, это может в некоторых случаях существенно усложнить генерацию конкрет-
ных продуктов с заданными свойствами или вообще воспрепятствовать их генерации.

Варианты
Как уже упоминалось выше, AbstractFactory и AbstractProducts могут опре-
деляться как в виде интерфейса, так и в виде абстрактного класса, в зависимости от
потребностей приложения и личных предпочтений разработчика.
Кроме того, можно предусмотреть различные варианты шаблона Abstract Factory в
зависимости от способа его использования. Например, отдельные варианты этого
шаблона могут генерировать несколько объектов ConcreteFactory, что позволит
приложению одновременно использовать несколько семейств объектов Concrete-
Products.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Factory Method (стр. 42). Используется для реализации шаблона Abstract Factory.
• Singleton (стр. 54). Часто применяется при реализации конкретных механиз-
мов вида ConcreteFactory.
• Data Access Object [CJ2EEP]. Шаблон Data Access Object может пользоваться
шаблоном Abstract Factory, если возникает необходимость повышения гибкости
механизмов работы с базами данных.