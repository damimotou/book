Структурные шаблоны {structural patterns) с одинаковой эффективностью применя-
ются как для разделения, так и для объединения элементов приложения. Способы
воздействия структурных шаблонов на приложение могут быть самые разные.
Например, шаблон Adapter может обеспечить возможность двум несовместимым сис-
темам обмениваться информацией, тогда как шаблон Facade позволяет отобразить
упрощенный пользовательский интерфейс, не удаляя ненужных конкретному пользо-
вателю элементов управления.
Структурные шаблоны, рассмотренные в данной главе, имеют следующее назна-
чение.
• Adapter. Обеспечение взаимодействия двух классов путем преобразования интер-
фейса одного из них таким образом, чтобы им мог пользоваться другой класс.
• Bridge. Разделение сложного компонента на две независимые, но взаимосвязан-
ные иерархические структуры: функциональную абстракцию и внутреннюю
реализацию. Это облегчает изменение любого аспекта компонента.
• Composite. Предоставление гибкого механизма для создания иерархических дре-
вовидных структур произвольной сложности, элементы которых могут свобод-
но взаимодействовать с единым интерфейсом.
• Decorator. Предоставление механизма для добавления или удаления функциональ-
ности компонентов без изменения их внешнего представления или функций.
• Facade. Создание упрощенного интерфейса для группы подсистем или сложной
подсистемы.
• Flyweight. Уменьшение количества объектов системы с многочисленными низ-
коуровневыми особенностями путем совместного использования подобных
объектов.
• Half-Object Plus Protocol (HOPP). Предоставление единой сущности, которая раз-
мещается в двух или более областях адресного пространства.
• Proxy. Представление другого объекта, обусловленное необходимостью обеспе-
чения доступа или повышения скорости либо соображениями безопасности.