B r i d g e
Также известен как Handle/Body

Свойства шаблона
Тип: структурный
Уровень: компонент

Назначение
Разделение сложного компонента на две независимые, но взаимосвязанные ие-
рархические структуры: функциональную абстракцию и внутреннюю реализацию.
Это облегчает изменение любого аспекта компонента.

Представление
При разработке компонента, представляющего в PIM-приложении список неотлож-
ных дел, возникает вполне объяснимое желание обеспечить максимальную гибкость
представления этого компонента пользователю, чтобы последний мог использовать
маркированные и нумерованные списки или, скажем, списки, элементы которых поме-
чены иероглифами. Кроме того, хотелось бы иметь возможность модификации базовой
функциональности списка, что позволит предоставить пользователю выбор между не-
сортированным, упорядоченным и выстроенным по приоритетам списками.
Для обеспечения наличия в программе всех этих возможностей необходимо раз-
работать группу классов списков, каждый из которых обеспечивает определенный
тип вывода содержимого списка и организацию находящейся в нем информации.
Однако такой подход быстро продемонстрирует свою непрактичность, так как коли-
чество комбинаций, учитывающих все варианты вывода содержимого списка на экран
И организации списка, растет слишком быстро.
Гораздо удобнее разделить средства представления списка неотложных дел от
средств его нижележащей реализации. Эту задачу решает шаблон Bridge путем опре-
деления двух классов или интерфейсов, предназначенных для совместной работы.
В случае с PIM-приложением такие классы или интерфейсы могут называться, напри-
мер, L i s t и L i s t l m p l . Интерфейс L i s t представляет функциональность
вывода на экран, а все средства хранения элементов делегирует своей низкоуровневой реализа-
ции, т.е. классу L i s t l m p l .
Достоинство этого подхода проявляется при добавлении поддержки новых моде-
лей поведения к уже имеющимся. Для добавления буквенных или цифровых обозна-
чений элементов списка достаточно создать подкласс класса L i s t , а для поддержки
таких функций, как группирование последовательных элементов, — расширить класс
L i s t l m p l . Привлекательность этого решения состоит в том, что разработчик может
по своему усмотрению распределять функциональность по двум классам, что позволя-
ет получить суммарную функциональность с более широкими возможностями.

Область применения
Шаблон Bridge рекомендуется применять в следующих случаях.
• Вместо статической связи между абстракцией компонента и его реализацией,
необходимо создать гибкую связь.
• Любые изменения в реализации должны быть незаметны для клиентов.
• Идентифицированы абстракции и реализации нескольких компонентов.
• Можно использовать подклассы, но важнее всего обеспечить раздельное
управление двумя аспектами системы.

Описание
Иногда необходимо иметь в системе несколько достаточно сложных элементов,
внешняя функциональность и нижележащая реализация которых у тех или иных эле-
ментов была бы близкой с некоторыми небольшими различиями. В таких случаях ме-
ханизм наследования не является наилучшим решением, поскольку количество клас-
сов, которые нужно создать с его помощью, возрастает, как функция, зависящая сразу
от обоих указанных факторов. Например, если нужно реализовать два способа пред-
ставления и два способа реализации, это приведет к необходимости разработки че-
тырех отдельных классов, а если количество способов представления и реализации
увеличится всего лишь па единицу, количество классов возрастет более чем в два раза
и составит девять классов (табл. 3.2).
Кроме того, наследование привязывает компонент к статической модели, услож-
няя его изменение в будущем. Особенно сложно модифицировать готовый компо-
нент, когда требования к нему изменились только после завершения работы над при-
ложением, уже в ходе его эксплуатации. Без сомнения, лучше всего иметь в своем рас-
поряжении какой-то способ, обеспечивающий динамическое изменение обоих
аспектов компонента по мере того, как в этом возникает необходимость.
Рассмотрим шаблон Bridge. Этот шаблон решает описанную проблему путем раз-
деления двух указанных аспектов компонента. Получив две разные ветви наследова-
ния (одна — по линии функциональности, вторая — по линии реализации), гораздо
легче динамически создавать элементы с заданными характеристиками, комбинируя
функциональность и реализацию. Таким образом можно добиться высокой гибкости
при сравнительно небольших затратах на разработку программного кода.
Наконец, преимущества шаблона Bridge относительно объема дополнительного
программного кода особенно заметны по мере увеличения количества вариантов,
подлежащих реализации. В табл. 3.2 приведены некоторые цифры, демонстрирую-
щие общее количество классов, которые необходимы для реализации указанного в
первых столбцах количества вариантов, при использовании как обычного механизма
наследования, так и шаблона Bridge.

Сравнение наследования и шаблона Bridge
Архитектура шаблона Bridge позволяет выполнять мультиплексирование разных ва-
риантов внешнего представления и внутренней реализации компонента. Термин
"мультиплексирование" в контексте данного раздела означает возможность ассоциа-
ции в любой комбинации внешних и внутренних элементов, что обеспечивает увели-
чение диапазона возможных вариаций компонента.
Разделение компонента на две отдельные концепции, кроме того, способствует
облегчению понимания назначения компонента и его сопровождения. Это объясня-
ется тем, что каждая ветвь наследования выстраивается на основании одной концеп-
ции — либо абстракции, либо реализации.
Шаблон Bridge полезен в любой системе, которая должна демонстрировать ло-
кальную гибкость во время выполнения. Примером таких систем являются системы с
графическим пользовательским интерфейсом, которые должны быть переносимыми
на другие платформы. Это требует, чтобы нижележащая реализация применялась
только после запуска приложения в конкретной операционной системе. Кроме того,
хорошими кандидатами на применение шаблона Bridge являются также приложения,
которые изменяют представление своих данных в зависимости от региона (напри-
мер, представление даты, языка, формата национальной валюты). Наконец, шаблон
Bridge часто оказывается эффективным для бизнес-сущностей, которые могут связы-
ваться с несколькими разными источниками баз данных.
Концептуальным примером шаблона Bridge является коммутатор службы техниче-
ской поддержки. Определенное количество линий с определенными номерами по-
зволяют пользователю связаться с меняющимся по количественному и качественному
составу техническим персоналом. Понятно, что качество ответа на вопрос пользова-
теля очень сильно зависит от опыта представителя службы технической поддержки.
Кроме того, оно, по-видимому, зависит и от самого вопроса — всегда найдутся пользо-
ватели, жалующиеся на сломавшуюся подставку для кофе, которая так удобно выезжа-
ла из системного блока при легком нажатии на находящуюся поблизости кнопку.

Реализация
При реализации шаблона Bridge обычно используются следующие классы.
• Abstraction— это класс, который определяет в шаблоне Bridge функцио-
нальную абстракцию, формируя тем самым стандартное поведение и структуру.
Он содержит ссылку на экземпляр класса Implementation. Этот экземпляр
обычно создается с помощью специального метода (чтобы позволить модифи-
кацию во время выполнения программы) либо с помощью конструктора.
• RefineAbstraction — этот класс расширяет класс Abstraction и формирует
дополнительное или модифицированное поведение.
• Implementation— этот интерфейс представляет нижележащую функцио-
нальность, используемую экземплярами класса Abstraction.
• Concretelmplementation — этот класс реализует интерфейс Implementation.
Он обеспечивает функциональное наполнение поведения и структуры классов
Implementation.

Достоинства и недостатки
Шаблон Bridge позволяет нескольким объектам абстракций совместно использо-
вать одни и те же объекты нижележащей реализации. Он обеспечивает повышенную
гибкость при изменении реализации, причем изменения могут происходить без како-
го-либо вмешательства со стороны клиента.
При разработке архитектуры приложения, использующего шаблон Bridge, важно
четко определить, что относится к функциональной абстракции, а что — к внутрен-
ней реализации. Не менее важно решить, каким образом будет представлена истинно
базовая модель реализации шаблона Bridge. Проблема, которая часто возникает при
использовании шаблона Bridge, состоит в том, что нередко разработка реализации
шаблона выполняется на основе одной или двух возможных вариаций. Опасность за-
ключается в том, что при последующем развитии шаблона выясняется, что некото-
рые из элементов, считавшихся базовыми, на самом деле представляют собой кон-
кретные вариации, базирующиеся на абстракции и (или) реализации.
Как и в случае со многими другими распределенными объектными шаблонами,
возможно, придется подумать, что означает концепция равенства сущностей приме-
нительно к шаблону Bridge. Нужно ли сравнивать только абстракции либо только
реализации объектов, или же нужно рассматривать их в совокупности?

Варианты
Шаблон Bridge может реализовываться в следующих вариантах.
• Автоматическое управление. Некоторые реализации шаблона Bridge созданы та-
ким образом, что могут варьировать своей реализацией без какого-либо вмеша-
тельства конечного пользователя. Такое управление осуществляется на основе
информации, полученной от приложения или операционной системы.
• Совместное использование реализации. Иногда классы, реализующие шаблон
Bridge, особенно те, которые не привязываются к конкретному состоянию
(т.е. классы, не сохраняющие информацию о внутреннем состоянии), могут
использоваться совместно несколькими объектами приложения. Если совмест-
ное использование таких классов зависимости применяется довольно широко,
такие классы могут выполняться в виде интерфейсов.
• Единая реализация. В некоторых случаях создается один класс реализации, ко-
торый обслуживает несколько классов абстракции. Если применяется единая
реализация, то, очевидно, необходимость в определении базового класса для
ветви реализации шаблона Bridge отпадает.

Родственные шаблоны
К родственным относятся следующие шаблоны.
• Adapter (стр. 156). Шаблоны Bridge и Adapter очень похожи по структуре, но
различны по назначению. Шаблон Bridge разделяет абстракцию компонента от
его реализации, тем самым позволяя изменять любую составляющую независи-
мо от другой. Поэтому решение о применении шаблона Bridge должно прини-
маться до начала разработки приложения, т.е. на этапе проектирования его ар-
хитектуры. Шаблон Adapter позволяет использовать готовый объект сторонне-
го разработчика, несовместимый с разрабатываемой системой.
• Singleton (стр. 54). Как отмечалось в предыдущем подразделе, шаблон Singleton
может использоваться в тех случаях, когда организовано совместное использо-
вание классов реализации.
• Flyweight (стр. 196). Когда древовидная структура становится слишком объемной,
применение шаблона Flyweight позволяет уменьшить количество объектов дерева.
