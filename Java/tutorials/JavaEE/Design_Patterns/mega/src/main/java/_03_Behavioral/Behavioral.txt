Поведенческие шаблоны {behavioral patterns) применяются для передачи управления в
системе. Существуют методы организации управления, применение которых поз-
воляет добиться значительного повышения как эффективности системы, так и удоб-
ства ее эксплуатации. Поведенческие шаблоны представляют собой квинтэссенцию
проверенных на практике методов и обеспечивают понятные и простые в примене-
нии эвристические способы организации управления.
В данной главе рассматриваются следующие поведенческие шаблоны.
• Chain of Responsibility. Предназначен для организации в системе уровней ответст-
венности. Использование этого шаблона позволяет установить, должно ли со-
общение обрабатываться на том уровне, где оно было получено, или же оно
должно передаваться для обработки другому объекту.
• Command. Обеспечивает обработку команды в виде объекта, что позволяет со-
хранять ее, передавать в качестве параметра методам, а также возвращать ее в
виде результата, как и любой другой объект.
• Interpreter. Определяет интерпретатор некоторого языка.
• Iterator. Предоставляет единый метод последовательного доступа к элементам
коллекции, не зависящий от самой коллекции и никак с ней не связанный.
• Mediator. Предназначен для упрощения взаимодействия объектов системы пу-
тем создания специального объекта, который управляет распределением со-
общений между остальными объектами.
• Memento. Сохраняет "моментальный список" состояния объекта, позволяющий
такому объекту вернуться к исходному состоянию, не раскрывая своего содер-
жимого внешнему миру.
• Observer. Предоставляет компоненту возможность гибкой рассылки сообщений
интересующим его получателям.
• State. Обеспечивает изменение поведения объекта во время выполнения про-
граммы.
• Strategy. Предназначен для определения группы классов, которые представляют
собой набор возможных вариантов поведения. Это дает возможность гибко
подключать те или иные наборы вариантов поведения во время работы прило-
жения, меняя его функциональность "на ходу".
• Visitor. Обеспечивает простой и удобный в эксплуатации способ выполнения
тех или иных операций для определенного семейства классов. Это достигается
путем централизации с помощью данного шаблона возможных вариантов пове-
дения, что позволяет модифицировать или расширять их, не затрагивая клас-
сы, на которые распространяются эти варианты поведения.
• Template Method. Предоставляет метод, который позволяет подклассам перекры-
вать части метода, не прибегая к их переписыванию.

Примечание
К поведенческим шаблонам можно отнести также и шаблон MVC (Model-View-
Controller). Однако, учитывая его влияние на всю систему в целом, особенно
в контексте рекомендаций J2EE по спецификациям сервлетов и JSP, мы помести-
ли его в главе 4, "Системные шаблоны" (стр. 219).