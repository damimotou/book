S i n g l e t o n

Свойства шаблона
Тип: производящий шаблон
Уровень: объект

Назначение
Обеспечивает наличие в системе только одного экземпляра заданного класса, по-
зволяя другим классам получать доступ к этому экземпляру.

Представление
Предположим, что нам понадобился некий глобальный объект, т.е. такой объект,
доступ к которому можно было бы осуществить из любой точки приложения, но при
этом необходимо, чтобы он создавался только один раз. Иными словами, к этому объ-
екту должны иметь доступ все элементы приложения, но работать они должны с од-
ним и тем же экземпляром.
Примером такого объекта может быть хронологический список (history list), в ко-
тором хранится информация о всех действиях пользователя, которые он предприни-
мал, работая с приложением. Объект H i s t o r y L i s t по определению должен быть
доступным для всех элементов приложения, чтобы они могли либо заносить в него
сведения об очередной операции, выполненной пользователем, либо извлекать из
него данные о последней операции для ее отмены.
Один из возможных методов решения этой задачи состоит в создании глобального
объекта в главном модуле приложения с последующей передачей ссылки на этот объ-
ект всем другим объектам, которым это необходимо. Однако довольно трудно, при-
ступая к разработке приложения, правильно определить способ передачи ссылки, ко-
торый бы подходил для всех объектов, равно как и заранее предугадать, каким имен-
но элементам приложения понадобится этот объект. Еще одним недостатком данного
решения является невозможность воспрепятствовать другим объектам создавать до-
полнительные экземпляры глобального объекта (в нашем случае — HistoryList).
Существует и другой способ получения глобальных значений, основанный на при-
менении статических переменных. Это позволяет приложению обращаться напря-
мую к нескольким специальным статическим объектам, заключенным внутри некото-
рого класса.
Но данный подход также имеет ряд недостатков.
• Статический объект — это не самое лучшее решение, так как он создается во
время загрузки класса, что лишает разработчика возможности передачи ему
данных перед созданием экземпляра.
• Разработчик не может контролировать доступ к статическому объекту, кото-
рый объявлен общедоступным.
• Если разработчик решит, что вместо одного объекта ему понадобится, скажем,
тройка таких объектов, ему придется практически заново переписать весь код
клиентской части приложения.
В подобной ситуации очень полезным становится шаблон Singleton, который
обеспечивает удобный доступ всех элементов приложения к глобальному объекту.

Описание
Шаблон Singleton гарантирует на уровне JVM (Java Virtual Machine — виртуальная
машина Java), что в приложении не будет создано более одного экземпляра класса.
Для того чтобы обеспечить контроль над созданием экземпляров класса, достаточно
сделать конструктор закрытым (private).
Однако тут возникает небольшая проблема: как же теперь создать хотя бы один
экземпляр, если эта операция недоступна? Эта проблема решается с помощью пре-
доставления специального статического метода доступа ( g e t l n s t a n c e ()).
Данный метод создает единственный экземпляр (если, конечно, он уже не существует) и воз-
вращает вызвавшему его элементу ссылку на созданный объект-одиночку. Эта ссылка в
свою очередь сохраняется как статический закрытый атрибут класса полученного
объекта для последующего использования при вызовах.
Хотя объект-одиночку можно создать с помощью специального метода доступа, все
же чаще всего он создается во время загрузки класса. Отложенный вызов конструкто-
ра оправдано лишь в тех случаях, когда перед созданием экземпляра необходимо вы-
полнить некоторые настроечные инициализационные операции.
Примером объекта-одиночки может служить Президент Соединенных Штатов
Америки. Действительно, в США в любой момент времени может быть лишь один
действующий Президент. Когда Президент Российской Федерации снимает трубку на
аппарате прямой связи, он ожидает, что его собеседником на другом конце провода
будет именно Президент США.

Реализация
При реализации шаблона Singleton используется класс S i n g l e t o n . В этом классе
определяется закрытый конструктор, имеется закрытая статическая переменная, в
которой хранится ссылка на единственный экземпляр данного класса, а также опре-
делен статический метод доступа, возвращающий ссылку на этот экземпляр.
Остальные элементы класса S i n g l e t o n не отличаются от элементов других клас-
сов. Статический метод доступа может реализоваться таким образом, чтобы он мог
принимать решение о том, какой экземпляр создавать, базируясь на свойствах систе-
мы или значениях переданных ему параметров (подробнее об этом говорится в под-
разделе "Варианты" текущего раздела).

Достоинства и недостатки
Шаблону Singleton присущи следующие достоинства и недостатки.
• Единственным классом, который может создать экземпляр класса S i n g l e t o n ,
является сам класс S i n g l e t o n , причем создать его можно, лишь пользуясь пре-
доставленным статическим методом.
• Разработчик избавлен от необходимости передавать ссылку на объект-одиночку
всем объектам, которым требуется получить к нему доступ.
• С другой стороны, в зависимости от реализации шаблон Singleton может пред-
ставлять собой проблему для многопоточных приложений. В таких приложе-
ниях необходимо с повышенным вниманием следить за процессом инициали-
зации объекта-одиночки, так как в некоторых ситуациях приложение может
войти в состояние "войны потоков".

Варианты
Данный шаблон может выполнятся в следующих вариантах.
• Одним из свойств шаблона Singleton, которое часто остается незамеченным
для разработчиков, является возможность иметь несколько экземпляров внут-
ри класса. Достоинство такого варианта состоит в том, что, не переписывая ос-
тальную часть приложения, можно предоставить отдельным объектам специ-
альные методы для получения доступа к дополнительным экземплярам.
• Метод доступа шаблона Singleton может открыть целый набор экземпляров,
каждый из которых может относиться к другому подтипу. Метод доступа может
определять прямо во время выполнения, экземпляр какого именно подтипа
нужно вернуть. На первый взгляд такая возможность может показаться избы-
точной, но она, как правило, оказывается весьма полезной при использовании
динамической загрузки классов. Система, в которой используется шаблон
Singleton, остается неизменной, но при этом меняется нужным образом реали-
зация объекта-одиночки.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Abstract Factory (стр. 26).
• Builder (стр. 34).
• Prototype (стр. 48).