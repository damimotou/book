C h a i n  o f  R e s p o n s i b i l i t y

Свойства шаблона
Тип:поведенческий шаблон
Уровень: компонент

Назначение
Предназначен для организации в системе уровней ответственности. Использо-
вание этого шаблона позволяет установить, должно ли сообщение обрабатываться на
том уровне, где оно было получено, или же оно должно передаваться для обработки
другому объекту.

Представление
PIM-приложение может управлять не только контактами, но и проектами. Список
проектов можно представить в виде древовидной структуры объектов, каждый из ко-
торых соответствует одной задаче. В "корне" дерева также находится одна задача, ко-
торая представляет весь проект в целом. Эта базовая задача связана с набором подза-
дач, каждая из которых имеет собственные наборы подзадач и т.д. Данный подход
позволяет разделить крупный проект на все более и более детализированные наборы
взаимосвязанных целей. Это позволяет пользователю прибегнуть к групповым опера-
циям, соответствующим тем или иным целям, как показано в приведенном ниже
примере.
• Проект (базовая задача): завладеть страной.
• Подзадача: воспользоваться счастливым случаем.
• Подзадача: попробовать выиграть в лотерею.
• Подзадача: выяснить, где лучше климат — в Тихом океане или в Атлантическом.
• Подзадача: найти остров, выставленный на продажу.
• Подзадача: выяснить, продаются ли острова на аукционе Е-Вау.
• Подзадача: изучить процедуры ООН, относящиеся к образованию новых го-
сударств.
• Подзадача: придумать название своей страны.
Как лучше всего управлять информацией, имеющей подобную структуру? Один из
возможных подходов состоит в том, чтобы распределить задачи по уровням ответст-
венности. Но, как лучше организовать делегирование одной группы задач одному че-
ловеку, другой — другому и т.д.?
Возможным решением является определение специального атрибута для каждой
задачи, определяющего его владельца. Когда владелец задачи меняется, обновляется
информация о владельце и для всех подзадач данной задачи. Но это решение не очень
удачно, так как требует хранить дополнительную информацию о владельце для каж-
дой задачи, что усложняет работу пользователя.
Другое решение состоит в создании одного или нескольких централизованных
объектов, которые хранят информацию о владельцах задач. Хотя это решение более
эффективно с точки зрения управления памятью, оно также требует дополнительных
затрат по управлению связями между задачами и централизованным хранилищем
данных об их владельцах.
А что если использовать для управления владельцами само дерево задач? Опреде-
лим новый метод класса Task, например, как getOwner и свяжем его с атрибутом
owner. При вызове этот метод будет проверять, имеется ли у задачи владелец (т.е. от-
лично ли значение атрибута owner от нуля). Если владелец уже определен, метод воз-
вращает его имя, а если нет — объект класса Task вызывает метод getOwner вышеле-
жащего объекта. Данное решение гораздо менее трудоемкое, чем первые два, и при
этом эффективно с точки зрения использования памяти. Пользователю требуется
указывать владельцев задач лишь один раз, так как они автоматически назначаются
таковыми классом Task для всех подзадач своей задачи. Это обеспечивается путем де-
легирования вызовов метода getOwner нижележащих классов к вышележащим до тех
пор, пока не будет получена запрашиваемая информация о владельце задачи. Данное
решение иллюстрирует типичный случай применения шаблона Chain of Responsibility.

Область применения
Шаблон Chain of Responsibility рекомендуется использовать в следующих случаях.
• В системе имеется группа объектов, любой из которых может обрабатывать со-
общения определенного типа.
• Полученное сообщение должно быть обработано хотя бы одним из объектов
системы.
• Сообщения обрабатываются по схеме "обработай сам или перешли другому".
Иными словами, некоторые сообщения обрабатываются на том уровне, где они
были получены, тогда как другие пересылаются каким-то объектам иного уровня.

Описание
Когда в системе, построенной на принципах объектно-ориентированного про-
граммирования, выполняются какие-либо операции, они часто представляются в виде
событий (event) или сообщений (message). Сообщение может оформляться в виде под-
лежащего вызову метода или же в виде отдельного объекта системы. Обычно сообще-
ние направляется другому объекту, который определенным образом реагирует на не-
го или, как принято говорить, обрабатывает (handle) это сообщение.
В простейших случаях сообщение обрабатывается тем объектом, который его сге-
нерировал. Например, строка ввода может и генерировать сообщения в ответ на оп-
ределенные действия пользователя (такие как ввод текста с клавиатуры), и обрабаты-
вать их (отображая введенный текст в своем поле).
В более сложных случаях обработка сообщений может идти по многоступенчатой
схеме. Например, сообщение, требующее изменения внешнего вида или размера
компонента пользовательского интерфейса, может обрабатываться на разных уров-
нях. Если требуется изменить режим выравнивания текста в поле, то такое сообще-
ние может обработать и сам компонент. Но если требуется изменить режим выравни-
вания самого текстового поля, сообщение скорее всего будет перенаправлено какому-
то объекту более высокого уровня, содержащему это поле, такому, например, как па-
нель или окно. Эту модель вполне можно реализовать с помощью шаблона Chain of
Responsibility.
Шаблон Chain of Responsibility позволяет построить схему уровней обработки со-
общений. Если объект не может обработать какое-то сообщение, он передает его дру-
гому объекту в соответствии с установленной схемой. Часто шаблон Chain of Respon-
sibility реализуется в виде модели "родительский объект — дочерний объект" или
"контейнер — содержимое". В соответствии с такой моделью сообщение, не обрабо-
танное дочерним объектом, пересылается родительскому объекту, затем, возможно,
его родительскому объекту и т.д. до тех пор, пока не будет найден объект, имеющий
нужный обработчик.
Шаблон Chain of Responsibility хорошо подходит для самых различных операций с
системой GUI, построенной на объектно-ориентированных принципах. Поддержка
функций справочной системы GUI, изменение размера, форматирование и размещение
компонентов GUI — все эти задачи могут быть решены благодаря использованию данно-
го шаблона. В бизнес-моделях шаблон Chain of Responsibility иногда используется в виде
модели "целое — частное". Например, объект, представляющий собой отдельную строку
заказа, может отправить сообщение объекту, представляющему весь заказ в целом, за-
прашивая выполнение какой-то операции.
Работу шаблона Chain of Responsibility можно проиллюстрировать следующим при-
мером. Рассмотрим, как в организации проходит служебная записка с запросом на ко-
мандировку. Обычно такой запрос должен быть завизирован менеджером соответствую-
щего уровня. Если в записке идет речь о местной командировке на несколько часов, дос-
таточно визы непосредственного руководителя работника. Если же работник просит о
направлении его в командировку в другую страну, то скорее всего его служебная записка
будет перемещаться по иерархическим уровням организации до тех пор, пока не дойдет
до менеджера с самым высоким уровнем полномочий.
Схема работы шаблона Chain of Responsibility показана на рис. 2.1.

Реализация
Диаграмма классов шаблона Chain of Responsibility представлена на рис. Z.I.
При реализации шаблона Chain of Responsibility обычно используются следующие
классы.
• Handler. Интерфейс, который определяет метод, используемый для передачи
сообщения следующему обработчику. Сообщение — это обычно просто вызов
метода. В тех случаях, когда в сообщении нужно инкапсулировать больше дан-
ных, его роль может играть и отдельный объект.
• C o n c r e t e H a n d l e r . Класс, реализующий интерфейс Handler. Именно в этом
классе хранится ссылка на следующий объект Handler. Эта ссылка устанавли-
вается либо в конструкторе класса, либо с помощью вызова специального мето-
да. Реализация метода handleMessage может определять, как обрабатывать
метод и вызывать handleMethod, либо как пересылать сообщение следующему
объекту Handler, или и то, и другое.

Достоинства и недостатки
Шаблон Chain of Responsibility привносит в приложение большую гибкость во
всем, что касается обработки событий, так как он управляет этим довольно сложным
процессом, распределяя ответственность между несколькими более простыми эле-
ментами. Он позволяет действовать некоторому подмножеству классов как единому
целому, поскольку события, сгенерированные одним классом, могут перенаправлять-
ся для обработки другим классам подмножества.
Конечно, гибкость, предоставляемая данным шаблоном, не дается без труда: шаблон
Chain of Responsibility трудно разработать, протестировать и отладить. По мере того,
как система уровней, пересылающих друг другу сообщения, становится сложнее, разра-
ботчику приходится все внимательнее следить за тем, чтобы события обрабатывались
корректно.
Неудачное планирование различных средств пересылки сообщений может приводить
к появлению "пропавших сообщений" (сообщений, для которых не существует обработ-
чика и которые, таким образом, никогда не будут обработаны), а также к "замусориванию"
коммуникационных механизмов. Под "замусориванием" понимается слишком высокий
поток сообщений и чрезмерно большое количество этапов пересылки. Если за короткий
промежуток времени в системе генерируется слишком много сообщений и их приходится
пересылать по несколько раз, пока не освободиться обработчик, это может привести к су-
щественному снижению производительности системы.

Варианты
Шаблон Chain of Responsibility можно адаптировать к потребностям приложения
несколькими способами. Основные подходы базируются либо на выбранных страте-
гиях обработки, либо на стратегиях пересылки.
Стратегии обработки (handling strategies) фокусируются на том, как реализовано
поведение обработчика. Среди многих вариантов можно выделить следующие.
• Используемый по умолчанию обработчик. В некоторых реализациях устанавливает-
ся базовый обработчик, который используется всеми уровнями как обработчик
по умолчанию. Этот подход обычно применяется только в тех случаях, когда в
системе отсутствует явно определенный класс пересылки. Используемый по
умолчанию обработчик особенно полезен для решения проблемы пропавших
сообщений, упоминавшейся в приведенном выше подразделе "Достоинства и
недостатки" данного раздела.
• Расширение обработчика. В этом варианте обработчики, расположенные на каж-
дом последующем уровне, добавляют свою функциональность к функциональ-
ности базового обработчика. Например, данный вариант может оказаться по-
лезным в таком случае, как реализация ведения журналов.
• Динамические обработчики. В некоторых реализациях шаблона Chain of Responsibility
разрешается изменять структуру подсистемы пересылки сообщений во время вы-
полнения программы. Определив в каждом классе каждого уровня специальный
метод, можно определять и модифицировать схему передачи сообщений во время
работы приложения (естественно, со всеми последствиями, вытекающими из тако-
го усложнения системы).
Разные виды стратегии пересылки (forwarding strategies) определяют различные
подходы к обработке или пересылке сообщений, генерируемых компонентом.
• Обработка по умолчанию. Обрабатываются все сообщения, кроме тех, пересылка
которых определена явным образом.
• Пересылка по умолчанию. Пересылаются все сообщения, кроме тех, обработка
которых определена явным образом.
• Пересылка используемому по умолчанию обработчику. В данном, несколько усложненном
по сравнению с базовым, варианте используется обработчик по умолчанию. Любое
сообщение, для которого явным образом не указано, что оно должно быть обрабо-
тано на уровне заданного компонента или переслано заданному обработчику, пере-
сылается обработчику, используемому по умолчанию.
• Игнорирование по умолчанию. Отбрасывается любое сообщение, для которого не
было определено явным образом, что оно должно быть обработанным или пе-
ресланным. Данный вариант полезен в тех случаях, когда классы на каком-либо
уровне генерируют события, которые не используются в приложении, позво-
ляя таким образом, уменьшить эффект "замусоривания". Однако к его приме-
нению необходимо подходить осторожно, чтобы не столкнутся с безвозврат-
ной потерей важных для системы сообщений.

Родственные шаблоны
К родственным можно отнести структурный шаблон Composite (стр. 171). Шаблон
Chain of Responsibility часто используется именно с шаблоном Composite. При их со-
вместном использовании последний обеспечивает поддержку древовидной структуры
и базового механизма передачи сообщений, тогда как шаблон Chain of Responsibility
предоставляет правила, регулирующие передачу сообщений.
Кроме того, шаблон Composite организует пересылку сообщений "вниз" по дереву
(от корня к ветвям), тогда как шаблон Chain of Responsibility обычно обеспечивает их
пересылку "вверх" по дереву (от ветвей к корню).