Facade

Свойства шаблона
Тип: структурный
Уровень: компонент
Назначение
Создание упрощенного интерфейса для группы подсистем или сложной подсистемы.

Представление
Каждому пользователю хотелось бы иметь возможность изменения пользователь-
ского интерфейса в соответствии со своими предпочтениями или для того, чтобы
сделать свою работу более удобной. Например, некоторые пользователи имеют сла-
бое зрение и испытывают затруднения при чтении слишком мелких шрифтов, в связи
с чем им нужно средство, обеспечивающее увеличение размера стандартного шрифта
пользовательского интерфейса. Естественно, решение, сводящееся к принуждению
пользователя пройти всю процедуру начальной настройки приложения, отвечая на
вопросы многочисленных диалоговых окон (причем эти вопросы выводятся тем са-
мым мелким шрифтом, от которого пользователь хочет избавиться!) о предпочитае-
мых параметрах настройки модема, принтера и сканера, вряд ли можно назвать дру-
жественным. Для этой цели гораздо лучше подойдет специальный мастер, при созда-
нии которого были бы учтены все особенности восприятия информации человеком
со слабым зрением.
Несмотря на то, что такой мастер оказывает некоторую специфическую помощь,
нет никакой необходимости в том, чтобы как-то ограничивать набор параметров,
предоставляемых мастером пользователю для настройки. Такой мастер — это лишь
особое представление системы, не затрагивающее ее функциональность. Создание
подобного мастера происходит в соответствии с шаблоном проектирования, полу-
чившего название Facade.

Область применения
Шаблон Facade рекомендуется использовать в следующих случаях.
• Необходимо упростить работу со сложной системой, предоставив в распоря-
жение пользователя интерфейс, который, с одной стороны, является более
простым вариантом стандартного интерфейса, а с другой — сохраняет все па-
раметры тонкой настройки, присутствующие в стандартном интерфейсе.
• Требуется уменьшить зависимость клиентов от подсистем.
• Нужно создать слои подсистем, используя шаблон Facade для наборов подсистем.

Описание
Большинство современных программных систем достаточно сложны. Шаблоны
проектирования призваны помочь разработчикам таким образом структурировать
приложения, чтобы уменьшить влияние их сложности на процесс разработки и ис-
пользования. Одним из часто используемых в шаблонах проектирования подходов
является распределение функциональности по нескольким небольшим классам. Кро-
ме того, может применяться такой подход, как разделение системы на отдельные час-
ти, в результате чего также нередко появляются дополнительные классы. Разделение
системы на несколько подсистем позволяет не только снизить степень сложности, но
и разделить процесс разработки на отдельные этапы.
Разделение системы на несколько специализированных классов — это устоявшаяся
практика ООП. Однако наличие в системе большого количества классов может быть
не только достоинством, но и недостатком.
Клиентам, использующим такую систему, необходимо иметь дело с большим коли-
чеством объектов. Любой пользователь, столкнувшись с сотнями конфигурационных
параметров, скорее всего придет в замешательство. Это обстоятельство уже давно
было понято производителями автомобилей — вспомните, приходилось ли вам хоть
раз сталкиваться с необходимостью установки степени обогащенности топливной
смеси? Были времена, когда водитель должен был устанавливать этот параметр перед
каждым запуском двигателя. Однако сегодня мало кто из водителей догадывается о
существовании такого параметра: все, что мы должны сделать, — вставить ключ в за-
мок зажигания и провернуть его, чтобы запустить двигатель. Все остальное выполня-
ет за нас машина. Таким образом, чем меньше параметров контролирует клиент, тем
лучше для него. Шаблон Facade может предоставить в распоряжение пользователя
все необходимые ему параметры и определить, какие подсистемы нужно вызвать.
Обычно реализация шаблона Facade делегирует большую часть работы подсисте-
мам, но может какую-то часть выполнять и самостоятельно.
Необходимо подчеркнуть, что шаблон Facade предназначен не для сокрытия под-
систем. Его цель — обеспечить более простой интерфейс для определенного набора
подсистем, но так, чтобы не пострадали интересы клиентов, которым требуется пол-
ноценный доступ к параметрам тонкой настройки.
Одним из примеров реализации шаблона Facade является часто применяемые на
практике мастера настройки.

Реализация
Диаграмма классов шаблона Facade представлена на рис. 3.7.
При реализации шаблона Facade обычно используются следующие классы.
• Facade. Класс, используемый клиентами. Этот класс знает, с какими подсисте-
мами он работает и за что отвечает каждая из этих подсистем. Обычно все за-
просы клиента делегируются соответствующим подсистемам.
• Subsystem. Набор классов. Клиенты могут работать с такими наборами как на-
прямую, так и опосредованно, через класс Facade. Подсистемы ничего не зна-
ют о существовании последнего, для них класс Facade — это всего лишь еще
один клиент.

Достоинства и недостатки
Достоинство шаблона Facade состоит в том, что он предоставляет простой ин-
терфейс для взаимодействия со сложной системой, не уменьшая при этом возможно-
стей управления. Иными словами, данный интерфейс просто защищает клиента от
слишком большого количества параметров.
Шаблон Facade транслирует запросы клиентов тем подсистемам, которые могут их
обслужить. В большинстве случаев один запрос делегируется сразу нескольким под-
системам. Поскольку клиент взаимодействует лишь с классом Facade, это позволяет
менять внутреннюю логику системы, не затрагивая принципов работы клиента с
классом Facade.
Применение шаблона Facade способствует снижению взаимосвязи клиента с под-
системами. Кроме того, этот шаблон с успехом можно применять и для снижения
взаимосвязей между самими подсистемами. Каждая подсистема может иметь собст-
венный экземпляр класса Facade, через который с ней взаимодействуют классы из
других частей системы.

Варианты
Шаблон Facade может реализовываться в следующих вариантах.
• Facade может реализовываться как в виде интерфейса, так и в виде абстракт-
ного класса, что позволяет отложить определение деталей реализации, а также
снижает взаимосвязь компонентов системы.
• Для одного и того же набора подсистем можно определить несколько экземп-
ляров класса Facade.
• Шаблон Facade иногда используют для сокрытия подсистем. Когда в архитек-
туре системы определено, что данный шаблон реализуется на границах систем,
это означает, что тем самым достигается снижение сложности взаимодействия
систем между собой. Например, система, в которой все вызовы проходят через
централизованный фасадный интерфейс, является более удобной в сопровож-
дении, чем система, содержащая множество взаимодействующих друг с другом
напрямую классов.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Abstract Factory (стр. 26). Шаблон Abstract Factory предназначен для создания
семейств родственных объектов. Для упрощения доступа к различным объек-
там, создание которых выполняется с помощью механизма, определенного по
шаблону Abstract Factory, этот же механизм может использоваться и для созда-
ния фасадного объекта.
• Mediator (стр. 95). Шаблоны Mediator и Facade внешне очень похожи. Различие
состоит в их назначении и реализации. Шаблон Mediator позволяет упростить
взаимодействие между объектами, что реализуется путем добавления новой
функциональности. Шаблон Facade — это просто некая абстракция интерфейса
одной или более подсистем.
• Singleton (стр. 54). Шаблон Facade использует шаблон Singleton в тех случаях,
когда нужно получить единый, глобально доступный центр, через который
осуществляется обращение к подсистеме.
• Session Facade [CJ2EEP]. Это тот же шаблон Facade, в котором инкапсулирова-
ны сложные механизмы Enterprise JavaBeans, что упрощает работу с этой сис-
темой ее клиентам.
