P r o t o t y p e

Свойства шаблона
Тип: производящий шаблон
Уровень: отдельный класс

Назначение
Облегчает динамическое создание путем определения классов, объекты которых
могут создавать собственные дубликаты.

Область применения
Шаблон Prototype рекомендуется использовать в тех случаях, когда необходимо
создать объект, являющийся точной копией какого-либо объекта.

Описание
Название шаблона Prototype говорит само за себя: как и любой другой прототип,
он относится к объекту, который используется в качестве образца для создания ново-
го экземпляра с такими же значениями полей. Обеспечение возможности "создания
по состоянию" позволяет программам выполнять операции подобно управляемому
пользователем копированию, а также инициировать объекты, начальное состояние
которых было настроено в системе заранее. Такой подход к инициализации во мно-
гих случаях, когда нужно получить объект с определенным набором значений, оказы-
вается весьма удобным.
Классические примеры использования этого шаблона можно встретить в графиче-
ских и текстовых редакторах, в которых функции копирования и вставки в значитель-
ной степени повышают производительность труда пользователя. Некоторые бизнес-
пакеты также используют данный подход, позволяя создавать новые модели на основе
уже существующих. Полученные копии, как правило, модифицируются пользователем
для получения нужного ему нового состояния только что созданных объектов.

Реализация
Диаграмма классов шаблона Prototype представлена на рис. 1.4.
При реализации шаблона Prototype используется класс Prototype. В этом классе
определяется метод копирования, который возвращает экземпляр того же класса с
теми же значениями, что и оригинальный экземпляр Prototype. Новый экземпляр
может быть как частичной (shallow), так и полной (deep) копией оригинального объ-
екта (подробнее см. следующий подраздел "Достоинства и недостатки").

Достоинства и недостатки
Удобство использования шаблона Prototype заключается в том, что он позволяет
системе сгенерировать копию готового к использованию объекта, поля которого
имеют определенные, как правило, реальные, а не некие "абстрактные" значения, ус-
тановленные конструктором. Схема использования шаблона Prototype представлена
на рис. 1.5.
Ключевое значение для данного шаблона имеет такое свойство, как уровень копи-
рования.
• При создании частичной копии дублируются только элементы верхнего уровня
класса. Это позволяет ускорить процесс копирования, но, с другой стороны,
полученные дубликаты не во всех случаях могут быть полезными. Так как зна-
чения ссылок просто переписываются из оригинала в копию, соответствующие
указатели продолжают ссылаться на те же объекты. Таким образом, объекты
нижнего уровня одновременно используются несколькими копиями ориги-
нального объекта, что приводит к изменению значений во всех копиях при
внесении изменений в какой-либо одной из них.
• При полном копировании реплицируются не только атрибуты верхнего уров-
ня, но и нижележащие объекты. Это, как правило, приводит к замедлению ко-
пирования, что для объектов с очень сложной структурой может выражаться в
резком снижении производительности системы. Однако при таком копирова-
нии все копии не зависят ни друг от друга, ни от оригинального объекта.
Метод клонирования, присутствующий в классе Object, обеспечивает лишь одну
форму копирования, поэтому в тех случаях, когда нужно обеспечить и частичное, и
полное копирование, эта задача возлагается на разработчика.

Варианты
Данный шаблон может выполнятся в следующих вариантах.
• Копирующий конструктор. Одним из возможных вариантов реализации шаб-
лона является оформление его в виде копирующего конструктора. Такой кон-
структор (листинг 1.17) получает в качестве параметра экземпляр своего класса
и возвращает новую копию с теми же значениями полей, что и у объекта, пере-
данного в качестве параметра.
Примером такого класса является класс String, который позволяет создавать
новый экземпляр класса S t r i n g с помощью, например, такого вызова: new
String("text");
Достоинство данного варианта состоит в том, что в тексте программы очень лег-
ко понять, когда создается новый экземпляр класса. Однако есть один нюанс —
проще всего обеспечить лишь один вид копирования (либо частичное, либо пол-
ное). Конечно, это не столь существенно, так как можно написать конструктор,
который будет выполнять оба вида копирования. Такой конструктор должен
иметь два параметра: ссылку на копируемый объект и логическое значение, опре-
деляющее, какую копию (частичную или полную) нужно получить.
Недостатком копирующего конструктора можно назвать необходимость про-
верки полученной в качестве параметра ссылки, чтобы убедиться в том, что она
не пустая. Обычно при реализации шаблона Prototype в данном варианте исхо-
дят из предположения о том, что вызываемый метод принадлежит существую-
щему объекту.
• Метод клонирования. В языке программирования Java изначально встроен метод
клонирования, определенный в классе Java. lang. Object, который является
суперклассом для всех классов Java. Для того чтобы в экземпляре класса можно
было воспользоваться этим методом, класс должен реализовывать интерфейс
Java. lang.Clonable. Реализация этого интерфейса обеспечивает классу воз-
можность клонирования. Так как метод clone объявлен в классе Object закры-
тым (protected), для обеспечения его вызова необходимо его перекрывать.
В соответствии с Блохом, "методом clone () нужно пользоваться очень взве-
шенно" [BlochOl]. Это объясняется тем, что даже если класс, как уже упомина-
лось, реализует интерфейс Clonable, это еще не гарантирует, что объект бу-
дет обладать свойством клонирования. Поскольку в интерфейсе Clonable от-
сутствует определение метода clone, возможны ситуации, когда этот метод,
если он не был явно перекрыт, будет недоступен для вызова из класса. Еще од-
ним недостатком этого метода является то, что он возвращает лишь объекты
класса Object, что требует от программиста выполнять приведение типов пе-
ред использованием полученного клона.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Abstract Factory (стр. 26). Шаблон Abstract Factory может пользоваться шаблоном
Prototype для создания новых объектов, аналогичных имеющемуся объекту.
• Factory Method (стр. 42). Шаблон Factory Method может пользоваться шабло-
ном Prototype, играя роль "заготовки" для новых объектов.