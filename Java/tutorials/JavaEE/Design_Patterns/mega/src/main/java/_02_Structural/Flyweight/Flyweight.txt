Flyweight

Свойства шаблона
Тип: структурный
Уровень: компонент

Назначение
Уменьшение количества объектов системы с многочисленными низкоуровневыми
особенностями путем совместного использования подобных объектов.

Представление
Применение на практике принципов объектно-ориентированного программирования
ведет к тому, что во время выполнения приложения создается множество объектов
(особенно ярко эта особенность проявляется в тех случаях, когда в приложении интен-
сивно используются низкоуровневые объекты). Это приводит к увеличению накладных
расходов на использование памяти виртуальной машины Java (JVM —Java Virtual Machine).
Поскольку многие объекты PIM-приложения поддерживают редактирование, они
выполняются с использованием шаблона State (подробнее см. раздел "State" на
стр. 120), что позволяет таким объектам определять, нужно ли сохранять содержимое
редактируемого элемента. При этом каждый элемент может иметь собственную кол-
лекцию объектов-состояний.
Одним из способов избавления от необходимости задействовать множество объ-
ектов является совместное их использование. Действительно, многие из этих низко-
уровневых объектов отличаются один от другого лишь в незначительных деталях, то-
гда как большая часть данных и логики таких объектов остается неизменной. Совме-
стное использование экземпляров соответствующего класса позволяет резко снизить
количество объектов в системе, ничуть не теряя ее функциональности.
Применение шаблона Flyweight позволяет для определенного набора объектов от-
делить общую часть всех объектов от частностей. Данные, которыми отличаются
один от другого различные экземпляры класса (их иногда называют экстернальны-
ми), подключаются к типовому экземпляру по мере необходимости.

Область применения
Шаблон Flyweight можно использовать в тех случаях, когда выполняются все сле-
дующие условия.
• В приложении имеется множество одинаковых (или практически одинаковых)
объектов.
• Если объекты практически одинаковы, их различающиеся части можно отде-
лить от одинаковых частей, чем обеспечивается возможность совместного ис-
пользования последних.
• После отделения различающихся частей, группы почти одинаковых объектов
можно заменить одним совместно используемым объектом.
• Приложению необходимо различать практически одинаковые объекты в их
исходном состоянии.

Описание
Шаблон Flyweight предназначен для уменьшения количества объектов в приложе-
нии путем совместного их использования. Конечно, все объекты содержат некоторые
внутренние данные, однако все данные, относящиеся к контексту, в котором они ра-
ботают, предоставляются таким объектам извне. Каждый совместно используемый
объект должен обладать как можно меньшей индивидуальностью и быть независимым
от внешних источников с точки зрения своего содержимого.
Совместное использование объектов в соответствии с шаблоном Flyweight, умень-
шает количество объектов. Совместно используемый объект взаимодействует с не-
сколькими клиентами и, с точки зрения последних, ничем не отличается от обычного
объекта.
Примером реализации шаблона Flyweight является диспетчер компоновки (layout
manager). При разработке GUI, как правило, задействуется несколько компонентов и
контейнеров. Для определения визуальной компоновки графического интерфейса
применяются диспетчеры компоновки. По большому счету все диспетчеры подобны
один другому, их различия проявляются лишь в том, какими компонентами они управ-
ляют, а также в некоторых атрибутах. Если убрать такие компоненты и атрибуты, лю-
бой экземпляр любого диспетчера компоновки не будет отличаться от других экземп-
ляров. Когда возникает необходимость в функциональности конкретного диспетчера
компоновки, компоненты и атрибуты передаются одному совместно используемому
экземпляру. Совместное использование лишь одного объекта для всех типов диспет-
черов компоновки с настройкой его на нужный контекст, позволяет уменьшить коли-
чество объектов системы.
Клиенты, работающие с совместно используемыми объектами, отвечают за пре-
доставление и (или) вычисление информации, относящейся к их контексту. Допол-
нительная информация поступает совместно используемому объекту по мере необхо-
димости.
Поскольку типовой объект используется совместно, клиенту не нужно создавать
его самому. Вместо этого он получает такой объект через специальный механизм ге-
нерации объектов (подробнее см. раздел "Abstract Factory" на стр. 26). Именно этот
механизм и гарантирует корректное совместное использование объектов, создавае-
мых в соответствии с шаблоном Flyweight.
Однако далеко не все объекты, полученные в результате применения шаблона
Flyweight, должны обязательно быть совместно используемыми. То же самое относит-
ся и к реализующим классам. Шаблон Flyweight лишь позволяет организовать совме-
стное использование, но он не навязывает его.
Использовать шаблон Flyweight лучше всего в тех случаях, когда можно легко
идентифицировать и отделить внешние данные от объектов (при этом количество
состояний должно быть достаточно ограниченным).

Реализация
При реализации шаблона Flyweight обычно используются следующие классы.
• Flyweight. Интерфейс, определяющий методы, с помощью которых клиенты
могут передать внешнее состояние типовым объектам.
• ConcreteFlyweight. Реализация интерфейса Flyweight, которая обеспечи-
вает возможность хранения внутренних данных. Внутренние данные должны
быть репрезентативными для всех совместно используемых объектов.
• FlyweightFactory (см. раздел "Abstract Factory" на стр. 26). Механизм, отве-
чающий за создание типовых объектов и управление ими. Обеспечение доступа
к экземпляру класса Flyweight посредством специального механизма его соз-
дания гарантирует корректность совместного доступа. Такой механизм может
генерировать сразу все типовые объекты в момент запуска приложения или
выполнять такие операции по мере необходимости.
• Client. Клиент отвечает за создание контекста для совместно используемого
объекта и за передачу ему этого контекста. Единственным способом получения
ссылки на совместно используемый объект для клиента является вызов
FlyweightFactory.

Достоинства и недостатки
Очевидным достоинством этого шаблона является уменьшение количества обра-
батываемых объектов. Это может помочь сэкономить немало памяти, как оператив-
ной, так и дисковой, если сведения об объектах хранятся на диске.
Однако самая ощутимая экономия обеспечивается в тех случаях, когда контекст-
ная информация, необходимая для работы совместно используемым объектам, не со-
храняется, а вычисляется. Однако при этом есть и обратная сторона: за такую эконо-
мию приходится расплачиваться производительностью.
Теперь вместо хранения множества объектов, клиентам достаточно вычислить
контекст и передать его экземпляру совместно используемого объекта. Получив такую
информацию, последний производит определенные вычисления или выполняет дру-
гие операции. При корректной реализации снижение количества объектов неизбеж-
но проявляется в повышении производительности системы. Необходимо подчерк-
нуть, что особенно ощутимый выигрыш заметен в тех случаях, когда контекстная ин-
формация достаточно невелика, а совместно используемые объекты — наоборот,
достаточно объемны.

Варианты
Отсутствуют.

Родственные шаблоны
К родственным можно отнести следующие шаблоны.
• Abstract Factory (стр. 26). Шаблон Abstract Factory применяется для обеспече-
ния доступа к типовым объектам, тем самым обеспечивая корректное совмест-
ное использование последних.
• Composite (стр. 171). Этот шаблон часто используется для получения опреде-
ленной структуры объектов.
• State (стр. 120). Реализация шаблона State нередко осуществляется с использо-
ванием шаблона Flyweight.
• Strategy (стр. 130). Это еще один шаблон, при реализации которого удобно вос-
пользоваться преимуществами, предоставляемыми шаблоном Flyweight.